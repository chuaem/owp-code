%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% dielAnalysis.m
% This script uses the diel oxygen method to calculate GPP, ER, and NEM
% following Beck et al. (2015)
%
% AUTHOR:
% Emily Chua 
% 
% DATE:
% First created: 1/3/2024
% Last updated: 2/2/2024
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear;close all;clc

rootpath = 'G:\My Drive\Postdoc\Work\SMIIL\';

%====Import data===========================================================
sondename = 'ERDC';

cd([rootpath,'diel-method\owp-results\gull-',sondename,'\elkhorn'])
wtregDat = readtable('wtreg_res.csv');
wtregDat = table2timetable(wtregDat);
wtregDat.datetime_utc.TimeZone = "UTC";
wtregDat = wtregDat(:,"DO_nrm");   % DO_nrm is detided DO from wtreg
wtregDat.Properties.DimensionNames{1} = 'datetime_utc';

cd([rootpath,'open-water-platform-data\gull\cleaned'])
load(['gull-',sondename,'-cleaned.mat']);
switch sondename
    case 'BC'
        sondeDat = sonde1_cleaned;
    case 'ERDC'
        sondeDat = sonde2_cleaned;
end

cd([rootpath,'physical-data\wind-speed'])
load windSpeed.mat

cd([rootpath,'physical-data\baro-pressure'])
load baroPress.mat

cd([rootpath,'physical-data\par'])
load par.mat

%====Retime other datasets to same datetimes as detided DO data============
newTimes = wtregDat.datetime_utc(1):minutes(10):wtregDat.datetime_utc(end);

% Retime cleaned Gull met data
metDat_rt = retime(metDat_cleaned,newTimes,'mean'); 

% Retime sonde data
sondeDat_rt = retime(sondeDat,newTimes,'mean');

% Retime NOAA data
noaaDat_rt = retime(noaaDat,newTimes,'previous');

% Retime PAR data
parDat_rt = retime(parDat,newTimes,'previous');

%====Gap fill Gull met station wind speed data using NOAA daily means======
% Find where there are gaps in Gull met station wind speed data
for i = 1:height(metDat_rt.datetime_utc)
    nid = find(isnan(metDat_rt.wspd));
    id(1:length(nid),1) = nid;
end

% Replace missing Gull windspeed data with NOAA windspeed data
ind_nan = find(isnan(metDat_rt.wspd));
metDat_rt.wspd(ind_nan) = noaaDat_rt.wspd_avg(ind_nan);

%====Gap fill Gull met station T_air data==================================
% Cut off data once original dataset ends
endDate = parDat.datetime_utc(end);
ind_end = find(ismember(parDat_rt.datetime_utc,endDate));
parDat_rt(ind_end:end,{'Tair' 'light_lux' 'par'}) = {NaN};

% Retime Baro Pressure HOBO data to same datetimes as sonde data
bpDat_rt = retime(bpDat,newTimes,'previous');
% Cut off data once original dataset ends
endDate = bpDat.datetime_utc(end);
ind_end = find(ismember(bpDat_rt.datetime_utc,endDate));
bpDat_rt(ind_end:end,{'patm' 'Tair'}) = {NaN};

% Find where there are gaps in Gull met station air T data
for i = 1:height(metDat_rt.datetime_utc)
    nid = find(isnan(metDat_rt.Tair));
    id(1:length(nid),1) = nid;
end

% Replace missing Gull T_air data with HOBO Baro Pressure T_air data
ind_nan = find(isnan(metDat_rt.Tair));
metDat_rt.Tair(ind_nan) = bpDat_rt.Tair(ind_nan);

%====Gap fill Gull met station atmos p data================================
% Replace missing Gull p_atm data with HOBO Baro Pressure p_atm data
ind_nan = find(isnan(metDat_rt.patm));
metDat_rt.patm(ind_nan) = bpDat_rt.patm(ind_nan);

% Horizontally concatenate detided data and met data (already have common time vector)
dat = synchronize(wtregDat,metDat_rt);
% Horizontally concatenate detided data and sonde data (already have common time vector)
dat = synchronize(dat,sondeDat_rt);

% Check how many days of data remain in synchronized data
dataPoints = daysact(dat.datetime_utc(1),dat.datetime_utc);
wholeDays = length(unique(floor(dataPoints)));

%% STEP 1
%====Calculate DO concentration at equilibrium (DO_sat)=================
DO_sat = O2sol(dat.salinity,dat.temperature);         % [umol kg-1]

% Use Gibbs Seawater toolbox to calculate seawater density
rho_sw = gsw_rho(dat.salinity,dat.temperature,dat.p); % [kg m-3]

% Convert DO_sat units
DO_sat = DO_sat.*rho_sw/1000;             % [mmol m-3]

% Convert DO_nrm units
DO_nrm = dat.DO_nrm*1000/32;              % [mmol m-3]

% Calculate the percent oxygen saturation
DO_per_sat = DO_nrm./DO_sat*100; % [%]

%%
% Plot DO concentration and tidal level (c.f. Beck Fig. 6)
figure(9),clf
tiledlayout(2,1)
ax1 = nexttile;
plot(dat.datetime_local,dat.DO_conc,'.-','MarkerSize',6,'Linewidth',1)
hold on
plot(dat.datetime_local,DO_nrm,'.-','MarkerSize',6,'Linewidth',1)
legend('Observed','Detided')
ylabel('DO conc (mmol m^{-3})','FontSize',14)
title(['Gull - ',sondename,' Sonde'])
ax2 = nexttile;
plot(dat.datetime_local,dat.depth,'.-','MarkerSize',6,'Linewidth',1)
ylabel('Water Depth (m)')
linkaxes([ax1 ax2],'x')

%% STEP 2
%====Calculate gas exchange at air-water interface=======================
% Caffrey/Beck (uses "reaeration coefficient", ka)

H = mean(dat.depth,'omitnan');               % Mean water depth [m] -- add a constant (e.g., 0.5 m) to account for height of sonde above bottom??
Tkair = dat.Tair + 273.15;                  % Absolute air temperature [K]
R_specific = 287.0500676;                   % Specific gas constant for dry air [J kg-1 K-1]
rho_a = dat.patm*100 ./ (R_specific*Tkair); % Density of dry air [kg m-3]
T = dat.temperature;                               % Water temperature [degC]
S = dat.salinity;
u = dat.wspd;

% Calculate Vw (kinematic viscosity of sw)
for i = 1:length(T)
    Uw(i,1) = swp('m',S(i),T(i));  % Dynamic viscosity of sw [kg m-1 s-1]
end
Vw = Uw./rho_sw;    % Kinematic viscosity [m2 s-1]
kB = 1.3806503E-23; % Boltzmann's constant [m2 kg s-2 K-1]
R0 = 1.72E-10;      % Radius of O2 molecule [m]
Tk = T + 273.15;    % Absolute temperature [K]
ka = 1/H * 0.1706 .* (kB*Tk./(4*rho_sw.*Vw.^2.*R0)).^0.5 .* (rho_a./rho_sw).^0.5 .* u.^1.81;

% Air-water flux
D = ka.*(DO_sat - DO_nrm); % [mmol m-3 h-1]

%% STEP 3
%====Determine day/night times=============================================
% Get day/night indices based on lat and lon and Hilary's indexDayNight function
lat = 39.08;
lon = -74.78;
time_in = dat.datetime_utc;
tol = 0;
UTCoffset = 0;  % Input datetime vector is in UTC

[dayind,nightind] = indexDayNight_EJC(lat,lon,UTCoffset,time_in,tol);

% Manually define DST start and end times
start1 = datenum('03/14/2021 02:00','mm/dd/yyyy HH:MM');
end1 = datenum('11/07/2021 02:00','mm/dd/yyyy HH:MM');
start2 = datenum('03/13/2022 02:00','mm/dd/yyyy HH:MM');
end2 = datenum('11/6/2022 02:00','mm/dd/yyyy HH:MM');
start3 = datenum('03/12/2023 02:00','mm/dd/yyyy HH:MM');
end3 = datenum('11/5/2023 02:00','mm/dd/yyyy HH:MM');

% For plotting, create datetimes for when EDT begins/ends each year during data record
end1_dt = datetime(end1,'ConvertFrom','datenum','TimeZone','UTC');
start2_dt = datetime(start2,'ConvertFrom','datenum','TimeZone','UTC');
end2_dt = datetime(end2,'ConvertFrom','datenum','TimeZone','UTC');
start3_dt = datetime(start3,'ConvertFrom','datenum','TimeZone','UTC');
end3_dt = datetime(end3,'ConvertFrom','datenum','TimeZone','UTC');

figure(3),clf
plot(dat.datetime_local(dayind),dat.DO_nrm(dayind),'.b','MarkerSize',12)
hold on
plot(dat.datetime_local(nightind),dat.DO_nrm(nightind),'.k','MarkerSize',12)
xline(end1_dt,'--','label','DST Ends')
xline(start2_dt,'--','label','DST Starts')
xline(end2_dt,'--','label','DST Ends')
xline(start3_dt,'--','label','DST Starts')
xline(end3_dt,'--','label','DST Ends')
ylabel('DO conc (mmol m^{-3})')
xlabel('Local')
title(['Gull ',sondename,' - Detided DO Concentration'])

% Find the indices for when each day starts and stops
daystart = dayind(find(diff(dayind) > 1) + 1);
dayend = dayind(find(diff(dayind) > 1));

% Length of each day
daylength = dat.datetime_local(dayend(2:end)) - dat.datetime_local(daystart(1:end-1) - 1);
daylength = hours(daylength);

daystart_dt = dat.datetime_local(daystart(1:end-1));
dayend_dt = dat.datetime_local(dayend(2:end));

figure(7),clf;
plot(dat.datetime_local(daystart(1:end-1)),daylength,'.')
ylabel('Day length (h)')

%%
%====Calculate rates=======================================================
dCdt = nan(length(DO_nrm),1);
dCdt(2:end,1) = diff(DO_nrm) ./ hours(diff(dat.datetime_utc));  % [mmol m-3 h-1]

% Hourly rates of respiration and net production
for i = 1:length(daylength)
    % During night hours, P = 0
    R_hourly(i,1) = mean(dCdt(dayend(i+1):daystart(i+1)) - D(dayend(i+1):daystart(i+1)),'omitnan'); % Hourly rate of respiration; [mmol m-3 h-1]
    % During day hours, P != 0
    P_hourly(i,1) = mean(dCdt(daystart(i):dayend(i+1)) - D(daystart(i):dayend(i+1)),'omitnan');     % Hourly rate of net production; [mmol m-3 h-1]
end

figure(6),clf
yyaxis left;plot(dat.datetime_utc,dCdt,'.');ylabel('dC/dt (mmol m^{-3} h^{-1})')
yyaxis right;plot(dat.datetime_utc,D,'.');ylabel('D (mmol m^{-3} h^{-1})')
title(['Mass Balance - Gull ',sondename,' Sonde'])

% Daily rates
R_daily = R_hourly .* 24;                      % Daily rate of respiration; [mmol m-3 d-1]
P_daily = (P_hourly - R_hourly) .* daylength;  % Daily rate of gross production; [mmol m-3 d-1]

% Convert volumetric rates to depth-integrated (areal) estimates
GPP = P_daily * H;      % [mmol O2 m-2 d-1]
ER = R_daily * H;       % [mmol O2 m-2 d-1]
NEM = GPP + ER;         % [mmol O2 m-2 d-1]

metab_tbl = table(daystart_dt,dayend_dt,daylength,R_hourly,P_hourly,R_daily,P_daily,GPP,ER,NEM);
%%
cd('G:\My Drive\Postdoc\Work\SMIIL\figures\diel-analysis-figures\Gull ERDC')

% Plot metabolism results
figure(7),clf
plot(dat.datetime_utc(daystart(1:end-1)),GPP,'.-','MarkerSize',12,'LineWidth',1)
hold on
plot(dat.datetime_utc(daystart(1:end-1)),ER,'k.-','MarkerSize',12,'LineWidth',1)
plot(dat.datetime_utc(daystart(1:end-1)),NEM,'r.-','MarkerSize',12,'LineWidth',1)
xlabel('UTC')
ylabel('mmol O_2 m^{-2} d^{-1}','FontSize',14)
legend({'GPP','ER','NEM'},'FontSize',14)
set(gca,'FontSize',14,'LineWidth',2)
title(['Gull ',sondename,' Sonde - MATLAB Results Using Detided Data'])
ylim([-500 500])

metab_dtd = readtable('metab_dtd.csv');
figure(8),clf
plot(metab_dtd.Date,metab_dtd.Pg,'.-','MarkerSize',12,'LineWidth',1)
hold on
plot(metab_dtd.Date,metab_dtd.Rt,'k.-','MarkerSize',12,'LineWidth',1)
plot(metab_dtd.Date,metab_dtd.NEM,'r.-','MarkerSize',12,'LineWidth',1)
xlabel('UTC')
ylabel('mmol O_2 m^{-2} d^{-1}','FontSize',14)
legend({'GPP','ER','NEM'},'FontSize',14)
set(gca,'FontSize',14,'LineWidth',2)
title(['Gull ',sondename,' Sonde - R ecometab Results Using Detided Data'])
ylim([-500 500])
